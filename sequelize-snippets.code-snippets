{
	"Create Custom Controller": {
		"prefix": "ncc",
		"body": [
			"import * as Yup from 'yup';",
			"import ${1:Modelo_Singular} from '../models/${1:Modelo_Singular}';",
			"",
			"class ${1:Modelo_Singular}Controller {",
				"\tasync index(req, res) {",
					"\t\tconst { page = 1, limit = 10, filter = '' } = req.query;",
					"\t\tconst list = await ${1:Modelo_Plural}.findAllPaginate(filter, page, limit);",
					"\t\treturn res.json(list);",
				"\t}",
				"",
				"\tasync store(req, res) {",
					"\t\tconst schema = Yup.object().shape({",
						"\t\t\t${3:Attribute}: Yup.string().required(),",
					"\t\t});",
					"\t\tif (!(await schema.isValid(req.body))) {",
						"\t\t\treturn res.status(400).json({ error: 'Campos inválidos' });",
					"\t\t}",
					"\t\tconst ${2:Modelo_Singular_Minusculo}Exist = await ${1:Modelo_Singular}.findOne({",
						"\t\t\twhere: { name: req.body.name },",
					"\t\t});",
					"\t\tif (${2:Modelo_Singular_Minusculo}Exist) {",
						"\t\t\treturn res.status(400).json({ error: 'o cadastro já existe' });",
					"\t\t}",
					"\t\tconst ${2:Modelo_Singular_Minusculo} = await ${1:Modelo_Singular}.create(req.body);",
					"\t\treturn res.json({ ${2:Modelo_Singular_Minusculo} });",
				"\t}",
				"",
				"\tasync edit(req, res) {",
					"\t\tconst { id } = req.params;",
					"\t\tconst ${2:Modelo_Singular_Minusculo} = await ${1:Modelo_Singular}.findByPk(id);",
					"\t\treturn res.json({ ${2:Modelo_Singular_Minusculo} });",
				"\t}",
				"",
				"\tasync update(req, res) {",
					"\t\tconst schema = Yup.object().shape({",
						"\t\t\t${3:Attribute}: Yup.string().required(),",
					"\t\t});",
						"\t\tif (!(await schema.isValid(req.body))) {",
							"\t\t\treturn res.status(400).json({ error: 'Campos inválidos' });",
						"\t\t}",
						"\t\tconst { name } = req.body;",
						"\t\tlet ${2:Modelo_Singular_Minusculo} = await ${1:Modelo_Singular}.findByPk(req.params.id);",
						"\t\tif (name !== ${2:Modelo_Singular_Minusculo}.name) {",
								"\t\t\tconst ${2:Modelo_Singular}Exist = await ${1:Modelo_Singular}.findOne({",
								"\t\t\t\twhere: { name },",
								"\t\t\t});",
								"\t\t\tif (${2:Modelo_Singular_Minusculo}Exist) {",
											"\t\t\t\treturn res",
											"\t\t\t\t.status(400)",
											"\t\t\t\t.json({ error: 'já existe um cadastro com essas informações' });",
								"\t\t\t}",
						"\t\t}",
						"\t\t${2:Modelo_Singular_Minusculo} = await ${2:Modelo_Singular_Minusculo}.update(req.body);",
						"\t\treturn res.json({ ${2:Modelo_Singular_Minusculo} });",
				"\t}",
				"\tasync delete(req, res) {",
					"\t\tconst { id } = req.params;",
					"\t\tawait ${1:Modelo_Singular}.update(",
					"\t\t\t{ enabled: false },",
					"\t\t\t{",
						"\t\t\t\twhere: { id },",
						"\t\t\t}",
					"\t\t);",
					"\t\treturn res.status(200).send({ message: 'Deletado com sucesso!' });",
				"\t}",
			"}",
			"",
			"export default new ${1:Modelo_Singular}Controller();",
			"",
		],
		"description": "Create an api controller"
	},
	"Create Custom Model": {
		"prefix": "ncm",
		"body": [
			"import Sequelize, { Model } from 'sequelize';",
			"import paginate from '../lib/Pagination';",
			"",
			"class ${1:Modelo_Singular} extends Model {",
				"\tstatic init(sequelize) {",
				"\t\tsuper.init(",
				"\t\t\t{",
				"\t\t\t\t// Attributes",
				"\t\t\t\t// document: Sequelize.STRING,",
				"\t\t\t},",
				"\t\t\t{",
					"\t\t\t\tsequelize,",
				"\t\t\t}",
				"\t\t);",
				"\t\tthis.findAllPaginate = async (filter = '', page = 1, limit = 10) => {",
					"\t\t\tlet data;",
					"\t\t\tif (filter) {",
						"\t\t\t\tdata = await this.findAndCountAll({",
							"\t\t\t\t\t// It creates a pagination using the count",
							"\t\t\t\t\twhere: {",
								"\t\t\t\t\t${2:Field Name}: { [Sequelize.Op.iLike]: '%' + filter + '%' },",
							"\t\t\t\t},",
							"\t\t\t\t...paginate({ page, limit }),",
						"\t\t\t\t});",
					"\t\t\t} else {",
						"\t\t\t\tdata = await this.findAndCountAll({",
							"\t\t\t\t\t...paginate({ page, limit }),",
						"\t\t\t\t});",
					"\t\t\t}",
					"\t\t\tconst lastPage = parseFloat((data.count / limit).toFixed(0)) + 1;",
					"\t\t\treturn { ...data, lastPage, limit, page: parseFloat(page) };",
				"\t\t};",
				"\t\treturn this;",
				"\t}",
			"}",
			"export default ${1:Modelo_Singular};",
			"",
		],
		"description": "Create an api model"
	},
}
